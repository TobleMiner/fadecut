#!/bin/bash
#
# This file is part of fadecut
# http://url
#
# fadecut is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# fadecut is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with fadecut.  If not, see <http://www.gnu.org/licenses/>.

# Constants --------------------------------------------------------------------
# which files to work on
FILES=*.mp3

# where to put fadecut'ted files
OUTPUTDIR=new

# where to put the uncutted original files
ORIGDIR=orig

# here are the already fadecut'ted files, which are tested and we listened to already
DONEDIR=done

# here are the files, with which we got an error
# in same folder i put files, which i was listening to and found advertisement or bad cutting
ERRORDIR=error

# here will be the files which we have already downloaded and which we got again
DOUBLEDIR=double

# enqueue to rhythmbox player (0=false, 1=true)
ENQUEUE=0

# standard errorlevel definitions
E_NOARGS=65

# Variables --------------------------------------------------------------------
# Functions --------------------------------------------------------------------
logging()
#
# Description:  It writes messages to logfile or standard output.
#
# Parameter  :  $1 - the level of message
#               $2 - the message
#
# Std. Output:  Logging messages.
#
{
 time="$(date +%H):$(date +%M):$(date +%S)"
 prefix=""

 case $1 in
   -e)     prefix="Error:   ";;
   -i)     prefix="Info:    ";;
   -n)     prefix="Notice:  ";;
   -s)     prefix="Success: ";;
   -w)     prefix="Warning: ";;
   -d)     prefix="Debug:   ";;
   -a)     prefix="         ";;
 esac
 shift
 echo "${time} ${prefix}" ${1}
}
# Main  ------------------------------------------------------------------------

if [ $# -eq 0 ] 
then
  logging -i "Usage: `basename $0` pop|chillout" >&2
  # Error message to stderr.
  exit $E_NOARGS
  # Returns 65 as exit status of script (error code).
fi  

if [ "$1" == "pop" ] 
then
  GENRE="Pop"
  COMMENT="Radio Swiss Pop"

  #all values in seconds:
  TRIM_BEGIN=0
  TRIM_END=0
  FADE_IN=1
  FADE_OUT=4
fi

if [ "$1" == "chillout" ] 
then
  GENRE="Chillout"
  COMMENT="ANTENNE BAYERN Chillout"

  #all values in seconds:
  TRIM_BEGIN=5
  TRIM_END=7
  FADE_IN=2
  FADE_OUT=5
fi

if [ ! -d "$OUTPUTDIR" ]; then
  mkdir -p "$OUTPUTDIR"
fi

if [ ! -d "$ORIGDIR" ]; then
  mkdir -p "$ORIGDIR"
fi

if [ ! -d "$DONEDIR" ]; then
  mkdir -p "$DONEDIR"
fi

if [ ! -d "$ERRORDIR" ]; then
  mkdir -p "$ERRORDIR"
fi

if [ ! -d "$DOUBLEDIR" ]; then
  mkdir -p "$DOUBLEDIR"
fi

for F in $FILES
do
  logging -i "Processing $F ..."
  ARTIST=`echo $F | sed -e 's/ -.*//' | iconv -f UTF-8 -t ISO8859-1`
  if [ "$ARTIST" == "Radio Swiss Pop" ]
  then
    logging -w "Deleting advertisement: $F ..."
    #rm "$F"
    mv "$F" "$ERRORDIR"
  else
    TITLE=`echo $F | sed -e 's/^.* - //' | sed -e 's/.mp3//' | iconv -f UTF-8 -t ISO8859-1`
    LENGTH=`soxi -D "$F" | sed -e 's/\..*//'` 
    let TRIMLENGTH=$((LENGTH-TRIM_BEGIN-TRIM_END))
    let FADE_OUT_START=$((TRIMLENGTH-FADE_OUT))
    nice -15 sox -V1 "$F" -t wav - trim $TRIM_BEGIN $TRIMLENGTH fade t $FADE_IN $FADE_OUT_START $FADE_OUT | nice -15 lame --quiet --add-id3v2 --ta "$ARTIST" --tt "$TITLE" --tg "$GENRE" --tc "$COMMENT" - "$OUTPUTDIR"/"$F" 
    if [ "$?" -eq "0" ]; then
      mv "$F" "$ORIGDIR"
    else
      mv "$F" "$ERRORDIR"
    fi
    if [ $ENQUEUE -eq "1" ]; then
      rhythmbox-client --enqueue "$OUTPUTDIR"/"$F"
    fi
  fi
done

